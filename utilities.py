import math
import json
import numpy as np


output_filename='exported_data'

class mouse_data:
     """class to store data we want to keep"""
    def __init__(self,mouse_id,F490,F405,fs,n=None,t=np.array([]),t_stim=None):
        self.mouse_id=mouse_id
        self.F490=F490
        self.F405=F405
        self.fs=fs
        self.n=n if n else len(F490)
        self.t=t if t.any() else np.arange(0,(self.n)/fs,1/fs)
        self.t_stim=t_stim if t_stim else None


class Encoder(json.JSONEncoder):
    """json encoder for all json files generated/used in the pipeline"""
    def default(self, obj):
        if isinstance(obj, np.ndarray):
            return {'ndarray': obj.tolist()}
        if isinstance(obj,Callable):
            return {'function':obj.__name__}
        if isinstance(obj,mouse_data):
            return {'mouse_data':obj.__dict__}
        return json.JSONEncoder.default(self, obj)

def hook(obj):
    """hook for loading data from json files generated by this pipeline"""
    if 'ndarray' in obj:
        return np.array(obj['ndarray'])
    if 'mouse_data' in obj:
        return mouse_data(**obj['mouse_data'])
    return obj


def select_data(data:mouse_data,t_endrec):
    """
    select the data that will be used in the analysis'
    
    Parameters
    ----------
    data: mouse_data
        raw data to select from
    t_endrec: float
        the amount of time in seconds from stim to the end of the recording 
        to keep
    Returns
    -------
    start_ind: int
        index of the beginning of the cropped region of the recording relative
        to the raw data
    stim_ind: int
        index of the stim time relative to the raw data
    end_ind: int
        index of the end of the cropped region of the recording relative
        to the raw data
    pre_stim_490: numpy.ndarray
        490 data pre stim
    pre_stim_405: numpy.ndarray
        405 data pre stim
    sel_490: numpy.ndarray
        cropped 490 data
    sel_405: numpy.ndarray
        cropped 405 data
    """

    start_ind=math.ceil((data.t_stim-300)*data.fs)+1
    stim_ind=math.ceil((data.t_stim)*data.fs)+1
    end_ind=math.ceil((data.t_stim+t_endrec)*data.fs)+1

    pre_stim_490=data.F490[start_ind:stim_ind]
    pre_stim_405=data.F405[start_ind:stim_ind]
    sel_490=data.F490[start_ind:end_ind+1]
    sel_405=data.F405[start_ind:end_ind+1]


    return (start_ind, stim_ind, end_ind, pre_stim_490, pre_stim_405, sel_490, sel_405)

def norm_to_median_pre_stim(data:mouse_data,t_endrec):
    """
    normalize to the median of the data 5 minutes before the stimulus

    Parameters
    ---------
    rec: mouse_data
        an instance of a mouse_data object storing the raw data for a
        given mouse
    t_endrec: float
        the amount of time in seconds from stim to the end of the recording 
        to keep in the analysis

    Returns
    -------
    normed_490: numpy.ndarray
        1D array of normalized 490 data 
    normed_405: numpy.ndarray
        1D array of normalized 405 data 
    start_ind: int
        index of the beginning of the cropped region of the recording relative
        to the raw data
    stim_ind: int
        index of the stim time relative to the raw data
    end_ind: int
        index of the end of the cropped region of the recording relative
        to the raw data
    """

    start_ind, stim_ind, end_ind, pre_stim_490, pre_stim_405, sel_490, sel_405=select_data(data,t_endrec)

    #compute the baseline by taking the median of the 5 miutes pre-stimu data
    f490_baseline=np.median(pre_stim_490)
    f405_baseline=np.median(pre_stim_405)

    #normalize the 490 and 405 to the respctive baseline
    normed_490=(sel_490-f490_baseline)/f490_baseline
    normed_405=(sel_405-f405_baseline)/f405_baseline
    return (normed_490,normed_405, start_ind, stim_ind, end_ind)

def norm_to_405(data:mouse_data,t_endrec):
    """
    normalize to a linear fit of the 405 data'

    Parameters
    ---------
    rec: mouse_data
        an instance of a mouse_data object storing the raw data for a
        given mouse
    t_endrec: float
        the amount of time in seconds from stim to the end of the recording 
        to keep in the analysis

    Returns
    -------
    normed_490: numpy.ndarray
        1D array of normalized 490 data 
    normed_405: numpy.ndarray
        1D array of normalized 405 data 
    start_ind: int
        index of the beginning of the cropped region of the recording relative
        to the raw data
    stim_ind: int
        index of the stim time relative to the raw data
    end_ind: int
        index of the end of the cropped region of the recording relative
        to the raw data
    """
    start_ind, stim_ind, end_ind, pre_stim_490, pre_stim_405, sel_490, sel_405=select_data(data,t_endrec)

    x=np.arange(len(sel_405))
    m, b, _, _, _ = st.linregress(x, sel_405)

    fit_405=m*x+b

    normed_490=100*np.divide(sel_490-fit_405, fit_405)
    normed_490-=np.median(normed_490[0:300])

    normed_405=100*np.divide(sel_405-fit_405, fit_405)
    normed_405-=np.median(normed_405[0:300])
    
    return (normed_490,normed_405, start_ind, stim_ind, end_ind)

def zscore(data:mouse_data):
    pass 